{"version":3,"sources":["components/Header/style.module.css","components/Button/index.tsx","components/Header/index.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Button/style.module.css"],"names":["module","exports","Button","children","onClick","variant","size","color","icon","className","cx","styles","button","Header","useState","menuIsOpen","setMenuIsOpen","currentRoute","useLocation","useEffect","navContainer","header","pathname","navLink","to","logo","navs","menuButton","mobileNav","Home","React","lazy","Contact","Portofolio","App","exact","path","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,aAAe,4BAA4B,OAAS,sBAAsB,KAAO,oBAAoB,KAAO,oBAAoB,UAAY,yBAAyB,QAAU,uBAAuB,WAAa,4B,6MCqCtNC,EAxBiB,SAAC,GAO1B,IANLC,EAMI,EANJA,SACAC,EAKI,EALJA,QACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,MACAC,EACI,EADJA,KAEA,OACE,4BACEJ,QAASA,EACTK,UAAWC,IACTC,IAAOC,OACPD,IAAON,GACPM,IAAOL,GACPK,IAAOJ,GAJI,eAKRI,IAAOH,KAAOA,KAGlBL,IC1BQ,SAASU,IAAU,IAAD,EACKC,oBAAS,GADd,mBACxBC,EADwB,KACZC,EADY,KAEzBC,EAAeC,cAMrB,OAJAC,qBAAU,WACRH,GAAc,KACb,CAACC,IAGF,yBAAKR,UAAWE,IAAOS,cACrB,yBAAKX,UAAWE,IAAOU,QACrB,6BAC6B,MAA1BJ,EAAaK,UACZ,kBAAC,IAAD,CAASb,UAAWE,IAAOY,QAASC,GAAG,KACrC,yBAAKf,UAAWE,IAAOc,MAAvB,kBAIN,yBAAKhB,UAAWE,IAAOe,MACrB,kBAAC,IAAD,CAASjB,UAAWE,IAAOY,QAASC,GAAG,KAAvC,QAGA,kBAAC,IAAD,CAASf,UAAWE,IAAOY,QAASC,GAAG,eAAvC,cAGA,kBAAC,IAAD,CAASf,UAAWE,IAAOY,QAASC,GAAG,YAAvC,YAIF,yBAAKf,UAAWE,IAAOgB,YACrB,kBAAC,EAAD,CACEtB,QAAQ,cACRC,KAAK,IACLC,MAAM,UACNH,QAAS,kBAAMY,GAAeD,IAC9BP,MAAI,GAEJ,kBAAC,IAAD,SAILO,GACC,yBAAKN,UAAWE,IAAOiB,WACrB,kBAAC,IAAD,CAASnB,UAAWE,IAAOY,QAASC,GAAG,KAAvC,QAGA,kBAAC,IAAD,CAASf,UAAWE,IAAOY,QAASC,GAAG,eAAvC,cAGA,kBAAC,IAAD,CAASf,UAAWE,IAAOY,QAASC,GAAG,YAAvC,a,gBC5CJK,EAAOC,IAAMC,MAAK,kBAAM,gCACxBC,EAAUF,IAAMC,MAAK,kBAAM,gCAC3BE,EAAaH,IAAMC,MAAK,kBAAM,gCAkCrBG,MAhCf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,IAAD,KACE,kBAACI,EAAD,MACA,yBAAKJ,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,KAChB,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAACR,EAAD,QAGJ,kBAAC,IAAD,CAAOO,KAAK,YACV,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAACL,EAAD,QAGJ,kBAAC,IAAD,CAAOI,KAAK,eACV,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAACJ,EAAD,QAGJ,kBAAC,IAAD,CAAOG,KAAK,KACV,kBAAC,IAAD,CAAUZ,GAAG,YC3BPc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEhJ5BzD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,EAAI,iBAAiB,EAAI,iBAAiB,EAAI,iBAAiB,KAAO,oBAAoB,KAAO,oBAAoB,QAAU,uBAAuB,YAAc,8B","file":"static/js/main.ab30e35e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navContainer\":\"style_navContainer__3VJu-\",\"header\":\"style_header__MlSQ_\",\"logo\":\"style_logo__d1_Sa\",\"navs\":\"style_navs__3xJj5\",\"mobileNav\":\"style_mobileNav__1EXwa\",\"navLink\":\"style_navLink__27Zjg\",\"menuButton\":\"style_menuButton__1fXxq\"};","import React from \"react\";\n\nimport cx from \"classnames\";\n\nimport styles from \"./style.module.css\";\n\ntype Props = {\n  onClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  variant: \"fill\" | \"transparent\";\n  size: \"s\" | \"m\" | \"l\";\n  color: \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\" | \"danger\";\n  icon?: boolean;\n};\n\nconst Button: React.FC<Props> = ({\n  children,\n  onClick,\n  variant,\n  size,\n  color,\n  icon,\n}) => {\n  return (\n    <button\n      onClick={onClick}\n      className={cx(\n        styles.button,\n        styles[variant],\n        styles[size],\n        styles[color],\n        { [styles.icon]: icon }\n      )}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport { MdMenu } from \"react-icons/md\";\n\nimport styles from \"./style.module.css\";\nimport Button from \"../Button\";\n\nexport default function Header() {\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n  const currentRoute = useLocation();\n\n  useEffect(() => {\n    setMenuIsOpen(false);\n  }, [currentRoute]);\n\n  return (\n    <div className={styles.navContainer}>\n      <div className={styles.header}>\n        <div>\n          {currentRoute.pathname !== \"/\" && (\n            <NavLink className={styles.navLink} to=\"/\">\n              <div className={styles.logo}>Alif Sabrani</div>\n            </NavLink>\n          )}\n        </div>\n        <div className={styles.navs}>\n          <NavLink className={styles.navLink} to=\"/\">\n            Home\n          </NavLink>\n          <NavLink className={styles.navLink} to=\"/portofolio\">\n            Portofolio\n          </NavLink>\n          <NavLink className={styles.navLink} to=\"/contact\">\n            Contact\n          </NavLink>\n        </div>\n        <div className={styles.menuButton}>\n          <Button\n            variant=\"transparent\"\n            size=\"l\"\n            color=\"primary\"\n            onClick={() => setMenuIsOpen(!menuIsOpen)}\n            icon\n          >\n            <MdMenu></MdMenu>\n          </Button>\n        </div>\n      </div>\n      {menuIsOpen && (\n        <div className={styles.mobileNav}>\n          <NavLink className={styles.navLink} to=\"/\">\n            Home\n          </NavLink>\n          <NavLink className={styles.navLink} to=\"/portofolio\">\n            Portofolio\n          </NavLink>\n          <NavLink className={styles.navLink} to=\"/contact\">\n            Contact\n          </NavLink>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { Suspense } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport Header from \"./components/Header\";\n\nimport \"./styles/fonts.css\";\nimport \"./styles/index.css\";\n\nconst Home = React.lazy(() => import(\"./pages/home\"));\nconst Contact = React.lazy(() => import(\"./pages/contact\"));\nconst Portofolio = React.lazy(() => import(\"./pages/portofolio\"));\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Header></Header>\n        <div className=\"page\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Suspense fallback={<div>Loading...</div>}>\n                <Home />\n              </Suspense>\n            </Route>\n            <Route path=\"/contact\">\n              <Suspense fallback={<div>Loading...</div>}>\n                <Contact></Contact>\n              </Suspense>\n            </Route>\n            <Route path=\"/portofolio\">\n              <Suspense fallback={<div>Loading...</div>}>\n                <Portofolio></Portofolio>\n              </Suspense>\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/\"></Redirect>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__1H5Da\",\"s\":\"style_s__3Andp\",\"m\":\"style_m__2y2T1\",\"l\":\"style_l__3ZqVI\",\"icon\":\"style_icon__Feldd\",\"fill\":\"style_fill__3tNpQ\",\"primary\":\"style_primary__3toSp\",\"transparent\":\"style_transparent__3SsMY\"};"],"sourceRoot":""}